{"version":3,"sources":["components/board/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["KanbanBoard","onTaskMove","columnsData","columns","useState","setColumns","name","column","newTask","setNewTask","useEffect","state","localStorage","getItem","parsedState","JSON","parse","forEach","initialColumns","error","console","setItem","stringify","Task","task","useDrag","type","item","from","collect","monitor","isDragging","drag","className","ref","onClick","columnName","prevColumns","filter","t","deleteTask","Column","title","tasks","useDrop","accept","drop","to","Object","keys","find","key","includes","push","isOver","canDrop","map","id","DndProvider","backend","HTML5Backend","onSubmit","e","preventDefault","newColumns","Date","now","value","onChange","target","col","App","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUA+KeA,EAxKK,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAqBC,EAAkB,EAA3BC,QACjC,EAA8BC,mBAAS,IAAvC,mBAAOD,EAAP,KAAgBE,EAAhB,KAEA,EAA8BD,mBAAS,CAAEE,KAAM,GAAIC,OAAQ,SAA3D,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IACE,IAAMC,EAAQC,aAAaC,QAAQ,sBACnC,GAAIF,EAAO,CACT,IAAMG,EAAcC,KAAKC,MAAML,GACzBR,EAAU,GAChBD,EAAYe,SAAQ,SAAAV,GAClBJ,EAAQI,EAAOD,MAAQQ,EAAYP,EAAOD,OAAS,MAErDD,EAAWF,OACN,CAEL,IAAMe,EAAiB,GACvBhB,EAAYe,SAAQ,SAAAV,GAClBW,EAAeX,EAAOD,MAAQ,MAEhCD,EAAWa,IAEb,MAAOC,GACPC,QAAQD,MAAMA,MAIf,CAACjB,IAEJQ,qBAAU,WACR,IACEE,aAAaS,QAAQ,qBAAsBN,KAAKO,UAAUnB,IAC1D,MAAOgB,GACPC,QAAQD,MAAMA,MAEf,CAAChB,IAEJ,IAiDMoB,EAAO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMjB,EAAa,EAAbA,OACpB,EAAiBkB,YAAQ,CACvBC,KAAM,OACNC,KAAM,CAAEH,OAAMI,KAAMrB,GAClBsB,QAAS,SAAAC,GAAO,MAAK,CACnBC,aAAcD,EAAQC,iBAJnBC,EAAT,oBAOA,OACE,sBAAKC,UAAU,OAAOC,IAAKF,EAA3B,UACGR,EAAKlB,KACN,wBAAQ2B,UAAU,kBAAkBE,QAAS,kBAlBhC,SAACX,EAAMY,GACtB/B,GAAW,SAAAgC,GAET,OADFA,EAAYD,GAAcC,EAAYD,GAAYE,QAAO,SAAAC,GAAC,OAAIA,IAAMf,KAC3D,eAAKa,MAeuCG,CAAWhB,EAAMjB,IAApE,mBAKAkC,EAAS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAOP,EAAiB,EAAjBA,WAC9B,EAAiBQ,YAAQ,CACvBC,OAAQ,OACRC,KAAM,SAAAnB,GAxCiB,IAACH,EAAMuB,EAyCxBpB,EAAKC,OAASQ,IAzCIZ,EA0CDG,EAAKH,KA1CEuB,EA0CIX,EAzCpC/B,GAAW,SAAAgC,GACT,IAAMT,EAAOoB,OAAOC,KAAKZ,GAAaa,MACpC,SAAAC,GAAG,OAAId,EAAYc,GAAKC,SAAS5B,MAOnC,OALAa,EAAYT,GAAQS,EAAYT,GAAMU,QAAO,SAAAC,GAAC,OAAIA,IAAMf,KACxDa,EAAYU,GAAIM,KAAK7B,GACjBvB,GACFA,EAAWuB,EAAMI,EAAMmB,GAElB,eAAKV,QAmCZR,QAAS,SAAAC,GAAO,MAAK,CACnBwB,OAAQxB,EAAQwB,SAChBC,QAASzB,EAAQyB,cATZT,EAAT,oBAaA,OACE,sBAAKb,UAAU,SAAf,UACE,oBAAIA,UAAU,iBAAd,SAAgCS,IAChC,qBAAKT,UAAU,YAAYC,IAAKY,EAAhC,gBACGH,QADH,IACGA,OADH,EACGA,EAAOa,KAAI,SAAAhC,GAAI,OACd,cAACD,EAAD,CAAMC,KAAMA,EAAoBjB,OAAQ6B,GAAjBZ,EAAKiC,aAOtC,OACE,eAACC,EAAA,EAAD,CAAaC,QAASC,IAAtB,UACA,oBAAI3B,UAAU,YAAd,wBACA,uBAAM4B,SAhFQ,SAACC,GACfA,EAAEC,iBACEvD,EAAQF,MACVD,GAAW,SAAAgC,GACT,IAAM2B,EAAU,2BACX3B,GADW,kBAEb7B,EAAQD,OAFK,sBAEQ8B,EAAY7B,EAAQD,SAF5B,CAEqC,CAAED,KAAME,EAAQF,KAAMmD,GAAIQ,KAAKC,WAGpF,OADAzD,EAAW,CAAEH,KAAM,GAAIC,OAAQ,SACxByD,MAuEX,UACM,+CAEE,uBACEtC,KAAK,OACLpB,KAAK,OACL6D,MAAO3D,EAAQF,KACf8D,SArGa,SAACN,GACxBrD,EAAW,2BACND,GADK,kBAEPsD,EAAEO,OAAO/D,KAAOwD,EAAEO,OAAOF,eAqGtB,4CAEE,wBAAQA,MAAO3D,EAAQD,OAAQ6D,SAnGd,SAACN,GAC1BrD,EAAW,2BACND,GADK,IAERD,OAAQuD,EAAEO,OAAOF,UAgGX,SAEIjE,EAAYsD,KAAI,SAAAc,GAAG,OACjB,wBAAuBH,MAAOG,EAAIhE,KAAlC,SAAyCgE,EAAI5B,OAAhC4B,EAAIhE,cAKzB,wBAAQoB,KAAK,SAAb,yBAEJ,qBAAKO,UAAU,eAAf,SACC/B,EAAYsD,KAAI,SAAAc,GAAG,OAClB,cAAC7B,EAAD,CAEEC,MAAO4B,EAAI5B,MACXC,MAAOxC,EAAQmE,EAAIhE,MACnB8B,WAAYkC,EAAIhE,MAHXgE,EAAIhE,eClJJiE,MAff,WAYE,OAAO,cAAC,EAAD,CAAatE,WAJG,SAACuB,EAAMI,EAAMmB,GAClC3B,QAAQoD,IAAR,eAAoBhD,EAAKlB,KAAzB,uBAA4CsB,EAA5C,eAAuDmB,KAGT5C,QAXhC,CACd,CAAEG,KAAM,OAAQoC,MAAO,SACvB,CAAEpC,KAAM,cAAeoC,MAAO,eAC9B,CAAEpC,KAAM,OAAQoC,MAAO,QACvB,CAAEpC,KAAM,UAAWoC,MAAO,eCIf+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0a4a518.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { DndProvider } from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\n\nimport \"./board.css\";\n\nconst KanbanBoard = ({ onTaskMove, columns: columnsData }) => {\n  const [columns, setColumns] = useState({});\n\n  const [newTask, setNewTask] = useState({ name: \"\", column: \"todo\" });\n\n  useEffect(() => {\n    try {\n      const state = localStorage.getItem(\"kanban-board-state\");\n      if (state) {\n        const parsedState = JSON.parse(state);\n        const columns = {};\n        columnsData.forEach(column => {\n          columns[column.name] = parsedState[column.name] || [];\n        });\n        setColumns(columns);\n      } else {\n        // initialize columns with empty arrays\n        const initialColumns = {};\n        columnsData.forEach(column => {\n          initialColumns[column.name] = [];\n        });\n        setColumns(initialColumns);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n\n    \n  }, [columnsData]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"kanban-board-state\", JSON.stringify(columns));\n    } catch (error) {\n      console.error(error);\n    }\n  }, [columns]);\n\n  const handleTaskChange = (e) => {\n    setNewTask({\n      ...newTask,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleColumnChange = (e) => {\n    setNewTask({\n      ...newTask,\n      column: e.target.value\n    });\n  };\n\n  const addTask = (e) => {\n    e.preventDefault();\n    if (newTask.name) {\n      setColumns(prevColumns => {\n        const newColumns = {\n          ...prevColumns,\n          [newTask.column]: [...prevColumns[newTask.column], { name: newTask.name, id: Date.now() }]\n        };\n        setNewTask({ name: \"\", column: \"todo\" });\n        return newColumns;\n      });\n    }\n  };\n\n  const moveTaskFromColumn = (task, to) => {\n    setColumns(prevColumns => {\n      const from = Object.keys(prevColumns).find(\n        key => prevColumns[key].includes(task)\n      );\n      prevColumns[from] = prevColumns[from].filter(t => t !== task);\n      prevColumns[to].push(task);\n      if (onTaskMove) {\n        onTaskMove(task, from, to);\n      }\n      return { ...prevColumns };\n    });\n  };\n\n  const deleteTask = (task, columnName) => {\n      setColumns(prevColumns => {\n      prevColumns[columnName] = prevColumns[columnName].filter(t => t !== task);\n        return { ...prevColumns };\n      });\n    };\n\n  const Task = ({ task, column }) => {\n    const [, drag] = useDrag({\n      type: \"task\",\n      item: { task, from: column },\n        collect: monitor => ({\n          isDragging: !!monitor.isDragging()\n        })\n      });\n    return (\n      <div className=\"task\" ref={drag}>\n        {task.name}\n        <button className=\"btn-delete-task\" onClick={() => deleteTask(task, column)}>X</button>\n      </div>\n    );\n    };\n\n  const Column = ({ title, tasks, columnName }) => {\n    const [, drop] = useDrop({\n      accept: \"task\",\n      drop: item => {\n        if (item.from !== columnName) {\n          moveTaskFromColumn(item.task, columnName);\n        }\n      },\n      collect: monitor => ({\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n      })\n    });\n\n    return (\n      <div className=\"column\">\n        <h2 className=\"column-heading\">{title}</h2>\n        <div className=\"task-list\" ref={drop}>\n          {tasks?.map(task => (\n            <Task task={task} key={task.id} column={columnName} />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n    <h1 className=\"app-title\">Kanban Pro</h1>\n    <form onSubmit={addTask}>\n          <label>\n            Task Name:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={newTask.name}\n              onChange={handleTaskChange}\n            />\n          </label>\n          <label>\n            Column:\n            <select value={newTask.column} onChange={handleColumnChange}>\n              {\n                columnsData.map(col => (\n                  <option key={col.name} value={col.name}>{col.title}</option>\n                ))\n              }\n            </select>\n          </label>\n          <button type=\"submit\">Add Task</button>\n        </form>\n      <div className=\"kanban-board\">\n      {columnsData.map(col => (\n        <Column\n          key={col.name}\n          title={col.title}\n          tasks={columns[col.name]}\n          columnName={col.name}\n        />\n      ))}\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default KanbanBoard;\n","import './App.css';\nimport KanbanBoard from './components/board';\n\nfunction App() {\n  const columns = [\n    { name: 'todo', title: 'To Do' },\n    { name: 'in-progress', title: 'In Progress' },\n    { name: 'done', title: 'Done' },\n    { name: 'archive', title: 'Archive' },\n  ];\n\n  const handleTaskMove = (task, from, to) => {\n    console.log(`Task ${task.name} moved from ${from} to ${to}`);\n  };\n\n  return <KanbanBoard onTaskMove={handleTaskMove} columns={columns} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}