{"version":3,"sources":["components/board/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["KanbanBoard","onTaskMove","useState","todo","inProgress","done","columns","setColumns","name","column","newTask","setNewTask","Task","task","useDrag","type","item","from","collect","monitor","isDragging","drag","className","ref","Column","title","tasks","columnName","useDrop","accept","drop","to","prevColumns","Object","keys","find","key","includes","filter","t","push","isOver","canDrop","map","id","DndProvider","backend","HTML5Backend","onSubmit","e","preventDefault","newColumns","Date","now","value","onChange","target","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAmIeA,EA5HK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACrB,EAA8BC,mBAAS,CACrCC,KAAM,GACNC,WAAY,GACZC,KAAM,KAHR,mBAAOC,EAAP,KAAgBC,EAAhB,KAMA,EAA8BL,mBAAS,CAAEM,KAAM,GAAIC,OAAQ,SAA3D,mBAAOC,EAAP,KAAgBC,EAAhB,KA4CMC,EAAO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMJ,EAAa,EAAbA,OACpB,EAAiBK,YAAQ,CACvBC,KAAM,OACNC,KAAM,CAAEH,OAAMI,KAAMR,GAClBS,QAAS,SAAAC,GAAO,MAAK,CACnBC,aAAcD,EAAQC,iBAJnBC,EAAT,oBAOA,OACE,qBAAKC,UAAU,OAAOC,IAAKF,EAA3B,SACGR,EAAKL,QAKNgB,EAAS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC9B,EAAiBC,YAAQ,CACvBC,OAAQ,OACRC,KAAM,SAAAd,GAhCiB,IAACH,EAAMkB,EAiCxBf,EAAKC,OAASU,IAjCId,EAkCDG,EAAKH,KAlCEkB,EAkCIJ,EAjCpCpB,GAAW,SAAAyB,GACT,IAAMf,EAAOgB,OAAOC,KAAKF,GAAaG,MACpC,SAAAC,GAAG,OAAIJ,EAAYI,GAAKC,SAASxB,MAOnC,OALAmB,EAAYf,GAAQe,EAAYf,GAAMqB,QAAO,SAAAC,GAAC,OAAIA,IAAM1B,KACxDmB,EAAYD,GAAIS,KAAK3B,GACjBZ,GACFA,EAAWY,EAAMI,EAAMc,GAElB,eAAKC,QA2BZd,QAAS,SAAAC,GAAO,MAAK,CACnBsB,OAAQtB,EAAQsB,SAChBC,QAASvB,EAAQuB,cATZZ,EAAT,oBAaA,OACE,sBAAKR,UAAU,SAAf,UACE,6BAAKG,IACL,qBAAKH,UAAU,YAAYC,IAAKO,EAAhC,SACGJ,EAAMiB,KAAI,SAAA9B,GAAI,OACb,cAACD,EAAD,CAAMC,KAAMA,EAAoBJ,OAAQkB,GAAjBd,EAAK+B,aAOtC,OACE,eAACC,EAAA,EAAD,CAAaC,QAASC,IAAtB,UACA,uBAAMC,SAvEQ,SAACC,GACfA,EAAEC,iBACExC,EAAQF,MACVD,GAAW,SAAAyB,GACT,IAAMmB,EAAU,2BACXnB,GADW,kBAEbtB,EAAQD,OAFK,sBAEQuB,EAAYtB,EAAQD,SAF5B,CAEqC,CAAED,KAAME,EAAQF,KAAMoC,GAAIQ,KAAKC,WAGpF,OADA1C,EAAW,CAAEH,KAAM,GAAIC,OAAQ,SACxB0C,MA8DX,UACM,+CAEE,uBACEpC,KAAK,OACLP,KAAK,OACL8C,MAAO5C,EAAQF,KACf+C,SA5Fa,SAACN,GACxBtC,EAAW,2BACND,GADK,kBAEPuC,EAAEO,OAAOhD,KAAOyC,EAAEO,OAAOF,eA4FtB,4CAEE,yBAAQA,MAAO5C,EAAQD,OAAQ8C,SA1Fd,SAACN,GAC1BtC,EAAW,2BACND,GADK,IAERD,OAAQwC,EAAEO,OAAOF,UAuFX,UACE,wBAAQA,MAAM,OAAd,mBACA,wBAAQA,MAAM,aAAd,yBACA,wBAAQA,MAAM,OAAd,wBAGJ,wBAAQvC,KAAK,SAAb,yBAEJ,sBAAKO,UAAU,eAAf,UACE,cAACE,EAAD,CAAQC,MAAM,QAAQC,MAAOpB,EAAQH,KAAMwB,WAAW,SACtD,cAACH,EAAD,CAAQC,MAAM,cAAcC,MAAOpB,EAAQF,WAAYuB,WAAW,eAClE,cAACH,EAAD,CAAQC,MAAM,OAAOC,MAAOpB,EAAQD,KAAMsB,WAAW,gBC/G9C8B,MAVf,WACE,OACE,cAAC,EAAD,CACExD,WAAY,SAACY,EAAMI,EAAMc,GACvB2B,QAAQC,IAAR,eAAoB9C,EAAKL,KAAzB,uBAA4CS,EAA5C,eAAuDc,QCKhD6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.01758d3f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { DndProvider } from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\n\nimport \"./board.css\";\n\nconst KanbanBoard = ({ onTaskMove }) => {\n  const [columns, setColumns] = useState({\n    todo: [],\n    inProgress: [],\n    done: []\n  });\n\n  const [newTask, setNewTask] = useState({ name: \"\", column: \"todo\" });\n\n  const handleTaskChange = (e) => {\n    setNewTask({\n      ...newTask,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleColumnChange = (e) => {\n    setNewTask({\n      ...newTask,\n      column: e.target.value\n    });\n  };\n\n  const addTask = (e) => {\n    e.preventDefault();\n    if (newTask.name) {\n      setColumns(prevColumns => {\n        const newColumns = {\n          ...prevColumns,\n          [newTask.column]: [...prevColumns[newTask.column], { name: newTask.name, id: Date.now() }]\n        };\n        setNewTask({ name: \"\", column: \"todo\" });\n        return newColumns;\n      });\n    }\n  };\n\n  const moveTaskFromColumn = (task, to) => {\n    setColumns(prevColumns => {\n      const from = Object.keys(prevColumns).find(\n        key => prevColumns[key].includes(task)\n      );\n      prevColumns[from] = prevColumns[from].filter(t => t !== task);\n      prevColumns[to].push(task);\n      if (onTaskMove) {\n        onTaskMove(task, from, to);\n      }\n      return { ...prevColumns };\n    });\n  };\n\n  const Task = ({ task, column }) => {\n    const [, drag] = useDrag({\n      type: \"task\",\n      item: { task, from: column },\n        collect: monitor => ({\n          isDragging: !!monitor.isDragging()\n        })\n      });\n    return (\n      <div className=\"task\" ref={drag}>\n        {task.name}\n      </div>\n    );     \n  };\n\n  const Column = ({ title, tasks, columnName }) => {\n    const [, drop] = useDrop({\n      accept: \"task\",\n      drop: item => {\n        if (item.from !== columnName) {\n          moveTaskFromColumn(item.task, columnName);\n        }\n      },\n      collect: monitor => ({\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n      })\n    });\n\n    return (\n      <div className=\"column\">\n        <h2>{title}</h2>\n        <div className=\"task-list\" ref={drop}>\n          {tasks.map(task => (\n            <Task task={task} key={task.id} column={columnName} />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n    <form onSubmit={addTask}>\n          <label>\n            Task Name:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={newTask.name}\n              onChange={handleTaskChange}\n            />\n          </label>\n          <label>\n            Column:\n            <select value={newTask.column} onChange={handleColumnChange}>\n              <option value=\"todo\">To Do</option>\n              <option value=\"inProgress\">In Progress</option>\n              <option value=\"done\">Done</option>\n            </select>\n          </label>\n          <button type=\"submit\">Add Task</button>\n        </form>\n      <div className=\"kanban-board\">\n        <Column title=\"To Do\" tasks={columns.todo} columnName=\"todo\" />\n        <Column title=\"In Progress\" tasks={columns.inProgress} columnName=\"inProgress\" />\n        <Column title=\"Done\" tasks={columns.done} columnName=\"done\" />\n        \n      </div>\n    </DndProvider>\n  );\n};\n\nexport default KanbanBoard;\n","import './App.css';\nimport KanbanBoard from './components/board';\n\nfunction App() {\n  return (\n    <KanbanBoard \n      onTaskMove={(task, from, to) => {\n        console.log(`Task ${task.name} moved from ${from} to ${to}`);\n      }}\n     />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}